/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface ISuperTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONSTANT_INFLOW_NFT"
      | "CONSTANT_OUTFLOW_NFT"
      | "POOL_ADMIN_NFT"
      | "POOL_MEMBER_NFT"
      | "allowance"
      | "approve"
      | "authorizeOperator"
      | "balanceOf"
      | "burn"
      | "changeAdmin"
      | "createAgreement"
      | "decimals"
      | "decreaseAllowance"
      | "defaultOperators"
      | "downgrade"
      | "downgradeTo"
      | "getAccountActiveAgreements"
      | "getAdmin"
      | "getAgreementData"
      | "getAgreementStateSlot"
      | "getHost"
      | "getUnderlyingDecimals"
      | "getUnderlyingToken"
      | "granularity"
      | "increaseAllowance"
      | "initialize"
      | "initializeWithAdmin"
      | "isAccountCritical"
      | "isAccountCriticalNow"
      | "isAccountSolvent"
      | "isAccountSolventNow"
      | "isOperatorFor"
      | "makeLiquidationPayoutsV2"
      | "name"
      | "operationApprove"
      | "operationDecreaseAllowance"
      | "operationDowngrade"
      | "operationIncreaseAllowance"
      | "operationSend"
      | "operationTransferFrom"
      | "operationUpgrade"
      | "operatorBurn"
      | "operatorSend"
      | "realtimeBalanceOf"
      | "realtimeBalanceOfNow"
      | "revokeOperator"
      | "selfApproveFor"
      | "selfBurn"
      | "selfMint"
      | "selfTransferFrom"
      | "send"
      | "settleBalance"
      | "symbol"
      | "terminateAgreement"
      | "toUnderlyingAmount"
      | "totalSupply"
      | "transfer"
      | "transferAll"
      | "transferFrom"
      | "updateAgreementData"
      | "updateAgreementStateSlot"
      | "upgrade"
      | "upgradeTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "AgreementCreated"
      | "AgreementLiquidated"
      | "AgreementLiquidatedBy"
      | "AgreementLiquidatedV2"
      | "AgreementStateUpdated"
      | "AgreementTerminated"
      | "AgreementUpdated"
      | "Approval"
      | "AuthorizedOperator"
      | "Bailout"
      | "Burned"
      | "ConstantInflowNFTCreated"
      | "ConstantOutflowNFTCreated"
      | "Minted"
      | "PoolAdminNFTCreated"
      | "PoolMemberNFTCreated"
      | "RevokedOperator"
      | "Sent"
      | "TokenDowngraded"
      | "TokenUpgraded"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONSTANT_INFLOW_NFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSTANT_OUTFLOW_NFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_ADMIN_NFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_MEMBER_NFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "downgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "downgradeTo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountActiveAgreements",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAgreementData",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementStateSlot",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithAdmin",
    values: [AddressLike, BigNumberish, string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCritical",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCriticalNow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolvent",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolventNow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeLiquidationPayoutsV2",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      boolean,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operationApprove",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationDecreaseAllowance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationDowngrade",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationIncreaseAllowance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationSend",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operationTransferFrom",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationUpgrade",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorBurn",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorSend",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOfNow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selfApproveFor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfBurn",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selfMint",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selfTransferFrom",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terminateAgreement",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUnderlyingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAll",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementData",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementStateSlot",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONSTANT_INFLOW_NFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONSTANT_OUTFLOW_NFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_ADMIN_NFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_MEMBER_NFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "downgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "downgradeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountActiveAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCritical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCriticalNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolventNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeLiquidationPayoutsV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operationApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationDecreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationDowngrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationIncreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOfNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfApproveFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selfBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selfMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toUnderlyingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementCreatedEvent {
  export type InputTuple = [
    agreementClass: AddressLike,
    id: BytesLike,
    data: BytesLike[]
  ];
  export type OutputTuple = [
    agreementClass: string,
    id: string,
    data: string[]
  ];
  export interface OutputObject {
    agreementClass: string;
    id: string;
    data: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementLiquidatedEvent {
  export type InputTuple = [
    agreementClass: AddressLike,
    id: BytesLike,
    penaltyAccount: AddressLike,
    rewardAccount: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    agreementClass: string,
    id: string,
    penaltyAccount: string,
    rewardAccount: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    agreementClass: string;
    id: string;
    penaltyAccount: string;
    rewardAccount: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementLiquidatedByEvent {
  export type InputTuple = [
    liquidatorAccount: AddressLike,
    agreementClass: AddressLike,
    id: BytesLike,
    penaltyAccount: AddressLike,
    bondAccount: AddressLike,
    rewardAmount: BigNumberish,
    bailoutAmount: BigNumberish
  ];
  export type OutputTuple = [
    liquidatorAccount: string,
    agreementClass: string,
    id: string,
    penaltyAccount: string,
    bondAccount: string,
    rewardAmount: bigint,
    bailoutAmount: bigint
  ];
  export interface OutputObject {
    liquidatorAccount: string;
    agreementClass: string;
    id: string;
    penaltyAccount: string;
    bondAccount: string;
    rewardAmount: bigint;
    bailoutAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementLiquidatedV2Event {
  export type InputTuple = [
    agreementClass: AddressLike,
    id: BytesLike,
    liquidatorAccount: AddressLike,
    targetAccount: AddressLike,
    rewardAmountReceiver: AddressLike,
    rewardAmount: BigNumberish,
    targetAccountBalanceDelta: BigNumberish,
    liquidationTypeData: BytesLike
  ];
  export type OutputTuple = [
    agreementClass: string,
    id: string,
    liquidatorAccount: string,
    targetAccount: string,
    rewardAmountReceiver: string,
    rewardAmount: bigint,
    targetAccountBalanceDelta: bigint,
    liquidationTypeData: string
  ];
  export interface OutputObject {
    agreementClass: string;
    id: string;
    liquidatorAccount: string;
    targetAccount: string;
    rewardAmountReceiver: string;
    rewardAmount: bigint;
    targetAccountBalanceDelta: bigint;
    liquidationTypeData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementStateUpdatedEvent {
  export type InputTuple = [
    agreementClass: AddressLike,
    account: AddressLike,
    slotId: BigNumberish
  ];
  export type OutputTuple = [
    agreementClass: string,
    account: string,
    slotId: bigint
  ];
  export interface OutputObject {
    agreementClass: string;
    account: string;
    slotId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementTerminatedEvent {
  export type InputTuple = [agreementClass: AddressLike, id: BytesLike];
  export type OutputTuple = [agreementClass: string, id: string];
  export interface OutputObject {
    agreementClass: string;
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementUpdatedEvent {
  export type InputTuple = [
    agreementClass: AddressLike,
    id: BytesLike,
    data: BytesLike[]
  ];
  export type OutputTuple = [
    agreementClass: string,
    id: string,
    data: string[]
  ];
  export interface OutputObject {
    agreementClass: string;
    id: string;
    data: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedOperatorEvent {
  export type InputTuple = [operator: AddressLike, tokenHolder: AddressLike];
  export type OutputTuple = [operator: string, tokenHolder: string];
  export interface OutputObject {
    operator: string;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BailoutEvent {
  export type InputTuple = [
    bailoutAccount: AddressLike,
    bailoutAmount: BigNumberish
  ];
  export type OutputTuple = [bailoutAccount: string, bailoutAmount: bigint];
  export interface OutputObject {
    bailoutAccount: string;
    bailoutAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnedEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    amount: bigint,
    data: string,
    operatorData: string
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    amount: bigint;
    data: string;
    operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConstantInflowNFTCreatedEvent {
  export type InputTuple = [constantInflowNFT: AddressLike];
  export type OutputTuple = [constantInflowNFT: string];
  export interface OutputObject {
    constantInflowNFT: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConstantOutflowNFTCreatedEvent {
  export type InputTuple = [constantOutflowNFT: AddressLike];
  export type OutputTuple = [constantOutflowNFT: string];
  export interface OutputObject {
    constantOutflowNFT: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedEvent {
  export type InputTuple = [
    operator: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike
  ];
  export type OutputTuple = [
    operator: string,
    to: string,
    amount: bigint,
    data: string,
    operatorData: string
  ];
  export interface OutputObject {
    operator: string;
    to: string;
    amount: bigint;
    data: string;
    operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolAdminNFTCreatedEvent {
  export type InputTuple = [poolAdminNFT: AddressLike];
  export type OutputTuple = [poolAdminNFT: string];
  export interface OutputObject {
    poolAdminNFT: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolMemberNFTCreatedEvent {
  export type InputTuple = [poolMemberNFT: AddressLike];
  export type OutputTuple = [poolMemberNFT: string];
  export interface OutputObject {
    poolMemberNFT: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedOperatorEvent {
  export type InputTuple = [operator: AddressLike, tokenHolder: AddressLike];
  export type OutputTuple = [operator: string, tokenHolder: string];
  export interface OutputObject {
    operator: string;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SentEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    amount: bigint,
    data: string,
    operatorData: string
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    amount: bigint;
    data: string;
    operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDowngradedEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUpgradedEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISuperToken extends BaseContract {
  connect(runner?: ContractRunner | null): ISuperToken;
  waitForDeployment(): Promise<this>;

  interface: ISuperTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONSTANT_INFLOW_NFT: TypedContractMethod<[], [string], "view">;

  CONSTANT_OUTFLOW_NFT: TypedContractMethod<[], [string], "view">;

  POOL_ADMIN_NFT: TypedContractMethod<[], [string], "view">;

  POOL_MEMBER_NFT: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  authorizeOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  changeAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  createAgreement: TypedContractMethod<
    [id: BytesLike, data: BytesLike[]],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  defaultOperators: TypedContractMethod<[], [string[]], "view">;

  downgrade: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  downgradeTo: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAccountActiveAgreements: TypedContractMethod<
    [account: AddressLike],
    [string[]],
    "view"
  >;

  getAdmin: TypedContractMethod<[], [string], "view">;

  getAgreementData: TypedContractMethod<
    [agreementClass: AddressLike, id: BytesLike, dataLength: BigNumberish],
    [string[]],
    "view"
  >;

  getAgreementStateSlot: TypedContractMethod<
    [
      agreementClass: AddressLike,
      account: AddressLike,
      slotId: BigNumberish,
      dataLength: BigNumberish
    ],
    [string[]],
    "view"
  >;

  getHost: TypedContractMethod<[], [string], "view">;

  getUnderlyingDecimals: TypedContractMethod<[], [bigint], "view">;

  getUnderlyingToken: TypedContractMethod<[], [string], "view">;

  granularity: TypedContractMethod<[], [bigint], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      underlyingToken: AddressLike,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string
    ],
    [void],
    "nonpayable"
  >;

  initializeWithAdmin: TypedContractMethod<
    [
      underlyingToken: AddressLike,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      admin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isAccountCritical: TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;

  isAccountCriticalNow: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isAccountSolvent: TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;

  isAccountSolventNow: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isOperatorFor: TypedContractMethod<
    [operator: AddressLike, tokenHolder: AddressLike],
    [boolean],
    "view"
  >;

  makeLiquidationPayoutsV2: TypedContractMethod<
    [
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: AddressLike,
      useDefaultRewardAccount: boolean,
      targetAccount: AddressLike,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  operationApprove: TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  operationDecreaseAllowance: TypedContractMethod<
    [account: AddressLike, spender: AddressLike, subtractedValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  operationDowngrade: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  operationIncreaseAllowance: TypedContractMethod<
    [account: AddressLike, spender: AddressLike, addedValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  operationSend: TypedContractMethod<
    [
      spender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  operationTransferFrom: TypedContractMethod<
    [
      account: AddressLike,
      spender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  operationUpgrade: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  operatorBurn: TypedContractMethod<
    [
      account: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  operatorSend: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  realtimeBalanceOf: TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        availableBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;

  realtimeBalanceOfNow: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        availableBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  revokeOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  selfApproveFor: TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  selfBurn: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  selfMint: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  selfTransferFrom: TypedContractMethod<
    [
      sender: AddressLike,
      spender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  send: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  settleBalance: TypedContractMethod<
    [account: AddressLike, delta: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  terminateAgreement: TypedContractMethod<
    [id: BytesLike, dataLength: BigNumberish],
    [void],
    "nonpayable"
  >;

  toUnderlyingAmount: TypedContractMethod<
    [amount: BigNumberish],
    [[bigint, bigint] & { underlyingAmount: bigint; adjustedAmount: bigint }],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferAll: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateAgreementData: TypedContractMethod<
    [id: BytesLike, data: BytesLike[]],
    [void],
    "nonpayable"
  >;

  updateAgreementStateSlot: TypedContractMethod<
    [account: AddressLike, slotId: BigNumberish, slotData: BytesLike[]],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONSTANT_INFLOW_NFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONSTANT_OUTFLOW_NFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_ADMIN_NFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_MEMBER_NFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAgreement"
  ): TypedContractMethod<
    [id: BytesLike, data: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultOperators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "downgrade"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "downgradeTo"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountActiveAgreements"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAgreementData"
  ): TypedContractMethod<
    [agreementClass: AddressLike, id: BytesLike, dataLength: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgreementStateSlot"
  ): TypedContractMethod<
    [
      agreementClass: AddressLike,
      account: AddressLike,
      slotId: BigNumberish,
      dataLength: BigNumberish
    ],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHost"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnderlyingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "granularity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      underlyingToken: AddressLike,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeWithAdmin"
  ): TypedContractMethod<
    [
      underlyingToken: AddressLike,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      admin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAccountCritical"
  ): TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAccountCriticalNow"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAccountSolvent"
  ): TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAccountSolventNow"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOperatorFor"
  ): TypedContractMethod<
    [operator: AddressLike, tokenHolder: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeLiquidationPayoutsV2"
  ): TypedContractMethod<
    [
      id: BytesLike,
      liquidationTypeData: BytesLike,
      liquidatorAccount: AddressLike,
      useDefaultRewardAccount: boolean,
      targetAccount: AddressLike,
      rewardAmount: BigNumberish,
      targetAccountBalanceDelta: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "operationApprove"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operationDecreaseAllowance"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike, subtractedValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operationDowngrade"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operationIncreaseAllowance"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike, addedValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operationSend"
  ): TypedContractMethod<
    [
      spender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operationTransferFrom"
  ): TypedContractMethod<
    [
      account: AddressLike,
      spender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operationUpgrade"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operatorBurn"
  ): TypedContractMethod<
    [
      account: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operatorSend"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "realtimeBalanceOf"
  ): TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        availableBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "realtimeBalanceOfNow"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        availableBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "selfApproveFor"
  ): TypedContractMethod<
    [account: AddressLike, spender: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selfBurn"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selfMint"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selfTransferFrom"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      spender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleBalance"
  ): TypedContractMethod<
    [account: AddressLike, delta: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "terminateAgreement"
  ): TypedContractMethod<
    [id: BytesLike, dataLength: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toUnderlyingAmount"
  ): TypedContractMethod<
    [amount: BigNumberish],
    [[bigint, bigint] & { underlyingAmount: bigint; adjustedAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferAll"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAgreementData"
  ): TypedContractMethod<
    [id: BytesLike, data: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAgreementStateSlot"
  ): TypedContractMethod<
    [account: AddressLike, slotId: BigNumberish, slotData: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, userData: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementCreated"
  ): TypedContractEvent<
    AgreementCreatedEvent.InputTuple,
    AgreementCreatedEvent.OutputTuple,
    AgreementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementLiquidated"
  ): TypedContractEvent<
    AgreementLiquidatedEvent.InputTuple,
    AgreementLiquidatedEvent.OutputTuple,
    AgreementLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementLiquidatedBy"
  ): TypedContractEvent<
    AgreementLiquidatedByEvent.InputTuple,
    AgreementLiquidatedByEvent.OutputTuple,
    AgreementLiquidatedByEvent.OutputObject
  >;
  getEvent(
    key: "AgreementLiquidatedV2"
  ): TypedContractEvent<
    AgreementLiquidatedV2Event.InputTuple,
    AgreementLiquidatedV2Event.OutputTuple,
    AgreementLiquidatedV2Event.OutputObject
  >;
  getEvent(
    key: "AgreementStateUpdated"
  ): TypedContractEvent<
    AgreementStateUpdatedEvent.InputTuple,
    AgreementStateUpdatedEvent.OutputTuple,
    AgreementStateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementTerminated"
  ): TypedContractEvent<
    AgreementTerminatedEvent.InputTuple,
    AgreementTerminatedEvent.OutputTuple,
    AgreementTerminatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementUpdated"
  ): TypedContractEvent<
    AgreementUpdatedEvent.InputTuple,
    AgreementUpdatedEvent.OutputTuple,
    AgreementUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedOperator"
  ): TypedContractEvent<
    AuthorizedOperatorEvent.InputTuple,
    AuthorizedOperatorEvent.OutputTuple,
    AuthorizedOperatorEvent.OutputObject
  >;
  getEvent(
    key: "Bailout"
  ): TypedContractEvent<
    BailoutEvent.InputTuple,
    BailoutEvent.OutputTuple,
    BailoutEvent.OutputObject
  >;
  getEvent(
    key: "Burned"
  ): TypedContractEvent<
    BurnedEvent.InputTuple,
    BurnedEvent.OutputTuple,
    BurnedEvent.OutputObject
  >;
  getEvent(
    key: "ConstantInflowNFTCreated"
  ): TypedContractEvent<
    ConstantInflowNFTCreatedEvent.InputTuple,
    ConstantInflowNFTCreatedEvent.OutputTuple,
    ConstantInflowNFTCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ConstantOutflowNFTCreated"
  ): TypedContractEvent<
    ConstantOutflowNFTCreatedEvent.InputTuple,
    ConstantOutflowNFTCreatedEvent.OutputTuple,
    ConstantOutflowNFTCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Minted"
  ): TypedContractEvent<
    MintedEvent.InputTuple,
    MintedEvent.OutputTuple,
    MintedEvent.OutputObject
  >;
  getEvent(
    key: "PoolAdminNFTCreated"
  ): TypedContractEvent<
    PoolAdminNFTCreatedEvent.InputTuple,
    PoolAdminNFTCreatedEvent.OutputTuple,
    PoolAdminNFTCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolMemberNFTCreated"
  ): TypedContractEvent<
    PoolMemberNFTCreatedEvent.InputTuple,
    PoolMemberNFTCreatedEvent.OutputTuple,
    PoolMemberNFTCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RevokedOperator"
  ): TypedContractEvent<
    RevokedOperatorEvent.InputTuple,
    RevokedOperatorEvent.OutputTuple,
    RevokedOperatorEvent.OutputObject
  >;
  getEvent(
    key: "Sent"
  ): TypedContractEvent<
    SentEvent.InputTuple,
    SentEvent.OutputTuple,
    SentEvent.OutputObject
  >;
  getEvent(
    key: "TokenDowngraded"
  ): TypedContractEvent<
    TokenDowngradedEvent.InputTuple,
    TokenDowngradedEvent.OutputTuple,
    TokenDowngradedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUpgraded"
  ): TypedContractEvent<
    TokenUpgradedEvent.InputTuple,
    TokenUpgradedEvent.OutputTuple,
    TokenUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "AgreementCreated(address,bytes32,bytes32[])": TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;
    AgreementCreated: TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;

    "AgreementLiquidated(address,bytes32,address,address,uint256)": TypedContractEvent<
      AgreementLiquidatedEvent.InputTuple,
      AgreementLiquidatedEvent.OutputTuple,
      AgreementLiquidatedEvent.OutputObject
    >;
    AgreementLiquidated: TypedContractEvent<
      AgreementLiquidatedEvent.InputTuple,
      AgreementLiquidatedEvent.OutputTuple,
      AgreementLiquidatedEvent.OutputObject
    >;

    "AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": TypedContractEvent<
      AgreementLiquidatedByEvent.InputTuple,
      AgreementLiquidatedByEvent.OutputTuple,
      AgreementLiquidatedByEvent.OutputObject
    >;
    AgreementLiquidatedBy: TypedContractEvent<
      AgreementLiquidatedByEvent.InputTuple,
      AgreementLiquidatedByEvent.OutputTuple,
      AgreementLiquidatedByEvent.OutputObject
    >;

    "AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": TypedContractEvent<
      AgreementLiquidatedV2Event.InputTuple,
      AgreementLiquidatedV2Event.OutputTuple,
      AgreementLiquidatedV2Event.OutputObject
    >;
    AgreementLiquidatedV2: TypedContractEvent<
      AgreementLiquidatedV2Event.InputTuple,
      AgreementLiquidatedV2Event.OutputTuple,
      AgreementLiquidatedV2Event.OutputObject
    >;

    "AgreementStateUpdated(address,address,uint256)": TypedContractEvent<
      AgreementStateUpdatedEvent.InputTuple,
      AgreementStateUpdatedEvent.OutputTuple,
      AgreementStateUpdatedEvent.OutputObject
    >;
    AgreementStateUpdated: TypedContractEvent<
      AgreementStateUpdatedEvent.InputTuple,
      AgreementStateUpdatedEvent.OutputTuple,
      AgreementStateUpdatedEvent.OutputObject
    >;

    "AgreementTerminated(address,bytes32)": TypedContractEvent<
      AgreementTerminatedEvent.InputTuple,
      AgreementTerminatedEvent.OutputTuple,
      AgreementTerminatedEvent.OutputObject
    >;
    AgreementTerminated: TypedContractEvent<
      AgreementTerminatedEvent.InputTuple,
      AgreementTerminatedEvent.OutputTuple,
      AgreementTerminatedEvent.OutputObject
    >;

    "AgreementUpdated(address,bytes32,bytes32[])": TypedContractEvent<
      AgreementUpdatedEvent.InputTuple,
      AgreementUpdatedEvent.OutputTuple,
      AgreementUpdatedEvent.OutputObject
    >;
    AgreementUpdated: TypedContractEvent<
      AgreementUpdatedEvent.InputTuple,
      AgreementUpdatedEvent.OutputTuple,
      AgreementUpdatedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AuthorizedOperator(address,address)": TypedContractEvent<
      AuthorizedOperatorEvent.InputTuple,
      AuthorizedOperatorEvent.OutputTuple,
      AuthorizedOperatorEvent.OutputObject
    >;
    AuthorizedOperator: TypedContractEvent<
      AuthorizedOperatorEvent.InputTuple,
      AuthorizedOperatorEvent.OutputTuple,
      AuthorizedOperatorEvent.OutputObject
    >;

    "Bailout(address,uint256)": TypedContractEvent<
      BailoutEvent.InputTuple,
      BailoutEvent.OutputTuple,
      BailoutEvent.OutputObject
    >;
    Bailout: TypedContractEvent<
      BailoutEvent.InputTuple,
      BailoutEvent.OutputTuple,
      BailoutEvent.OutputObject
    >;

    "Burned(address,address,uint256,bytes,bytes)": TypedContractEvent<
      BurnedEvent.InputTuple,
      BurnedEvent.OutputTuple,
      BurnedEvent.OutputObject
    >;
    Burned: TypedContractEvent<
      BurnedEvent.InputTuple,
      BurnedEvent.OutputTuple,
      BurnedEvent.OutputObject
    >;

    "ConstantInflowNFTCreated(address)": TypedContractEvent<
      ConstantInflowNFTCreatedEvent.InputTuple,
      ConstantInflowNFTCreatedEvent.OutputTuple,
      ConstantInflowNFTCreatedEvent.OutputObject
    >;
    ConstantInflowNFTCreated: TypedContractEvent<
      ConstantInflowNFTCreatedEvent.InputTuple,
      ConstantInflowNFTCreatedEvent.OutputTuple,
      ConstantInflowNFTCreatedEvent.OutputObject
    >;

    "ConstantOutflowNFTCreated(address)": TypedContractEvent<
      ConstantOutflowNFTCreatedEvent.InputTuple,
      ConstantOutflowNFTCreatedEvent.OutputTuple,
      ConstantOutflowNFTCreatedEvent.OutputObject
    >;
    ConstantOutflowNFTCreated: TypedContractEvent<
      ConstantOutflowNFTCreatedEvent.InputTuple,
      ConstantOutflowNFTCreatedEvent.OutputTuple,
      ConstantOutflowNFTCreatedEvent.OutputObject
    >;

    "Minted(address,address,uint256,bytes,bytes)": TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;
    Minted: TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;

    "PoolAdminNFTCreated(address)": TypedContractEvent<
      PoolAdminNFTCreatedEvent.InputTuple,
      PoolAdminNFTCreatedEvent.OutputTuple,
      PoolAdminNFTCreatedEvent.OutputObject
    >;
    PoolAdminNFTCreated: TypedContractEvent<
      PoolAdminNFTCreatedEvent.InputTuple,
      PoolAdminNFTCreatedEvent.OutputTuple,
      PoolAdminNFTCreatedEvent.OutputObject
    >;

    "PoolMemberNFTCreated(address)": TypedContractEvent<
      PoolMemberNFTCreatedEvent.InputTuple,
      PoolMemberNFTCreatedEvent.OutputTuple,
      PoolMemberNFTCreatedEvent.OutputObject
    >;
    PoolMemberNFTCreated: TypedContractEvent<
      PoolMemberNFTCreatedEvent.InputTuple,
      PoolMemberNFTCreatedEvent.OutputTuple,
      PoolMemberNFTCreatedEvent.OutputObject
    >;

    "RevokedOperator(address,address)": TypedContractEvent<
      RevokedOperatorEvent.InputTuple,
      RevokedOperatorEvent.OutputTuple,
      RevokedOperatorEvent.OutputObject
    >;
    RevokedOperator: TypedContractEvent<
      RevokedOperatorEvent.InputTuple,
      RevokedOperatorEvent.OutputTuple,
      RevokedOperatorEvent.OutputObject
    >;

    "Sent(address,address,address,uint256,bytes,bytes)": TypedContractEvent<
      SentEvent.InputTuple,
      SentEvent.OutputTuple,
      SentEvent.OutputObject
    >;
    Sent: TypedContractEvent<
      SentEvent.InputTuple,
      SentEvent.OutputTuple,
      SentEvent.OutputObject
    >;

    "TokenDowngraded(address,uint256)": TypedContractEvent<
      TokenDowngradedEvent.InputTuple,
      TokenDowngradedEvent.OutputTuple,
      TokenDowngradedEvent.OutputObject
    >;
    TokenDowngraded: TypedContractEvent<
      TokenDowngradedEvent.InputTuple,
      TokenDowngradedEvent.OutputTuple,
      TokenDowngradedEvent.OutputObject
    >;

    "TokenUpgraded(address,uint256)": TypedContractEvent<
      TokenUpgradedEvent.InputTuple,
      TokenUpgradedEvent.OutputTuple,
      TokenUpgradedEvent.OutputObject
    >;
    TokenUpgraded: TypedContractEvent<
      TokenUpgradedEvent.InputTuple,
      TokenUpgradedEvent.OutputTuple,
      TokenUpgradedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
