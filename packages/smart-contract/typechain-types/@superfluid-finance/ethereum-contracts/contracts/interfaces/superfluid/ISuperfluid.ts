/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace ISuperfluid {
  export type OperationStruct = {
    operationType: BigNumberish;
    target: AddressLike;
    data: BytesLike;
  };

  export type OperationStructOutput = [
    operationType: bigint,
    target: string,
    data: string
  ] & { operationType: bigint; target: string; data: string };

  export type ContextStruct = {
    appCallbackLevel: BigNumberish;
    callType: BigNumberish;
    timestamp: BigNumberish;
    msgSender: AddressLike;
    agreementSelector: BytesLike;
    userData: BytesLike;
    appCreditGranted: BigNumberish;
    appCreditWantedDeprecated: BigNumberish;
    appCreditUsed: BigNumberish;
    appAddress: AddressLike;
    appCreditToken: AddressLike;
  };

  export type ContextStructOutput = [
    appCallbackLevel: bigint,
    callType: bigint,
    timestamp: bigint,
    msgSender: string,
    agreementSelector: string,
    userData: string,
    appCreditGranted: bigint,
    appCreditWantedDeprecated: bigint,
    appCreditUsed: bigint,
    appAddress: string,
    appCreditToken: string
  ] & {
    appCallbackLevel: bigint;
    callType: bigint;
    timestamp: bigint;
    msgSender: string;
    agreementSelector: string;
    userData: string;
    appCreditGranted: bigint;
    appCreditWantedDeprecated: bigint;
    appCreditUsed: bigint;
    appAddress: string;
    appCreditToken: string;
  };
}

export interface ISuperfluidInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToAgreementClassesBitmap"
      | "allowCompositeApp"
      | "appCallbackPop"
      | "appCallbackPush"
      | "batchCall"
      | "callAgreement"
      | "callAgreementWithContext"
      | "callAppAction"
      | "callAppActionWithContext"
      | "callAppAfterCallback"
      | "callAppBeforeCallback"
      | "changeSuperTokenAdmin"
      | "ctxUseCredit"
      | "decodeCtx"
      | "forwardBatchCall"
      | "getAgreementClass"
      | "getAppCallbackLevel"
      | "getAppManifest"
      | "getGovernance"
      | "getNow"
      | "getSuperTokenFactory"
      | "getSuperTokenFactoryLogic"
      | "isAgreementClassListed"
      | "isAgreementTypeListed"
      | "isApp"
      | "isAppJailed"
      | "isCompositeAppAllowed"
      | "isCtxValid"
      | "jailApp"
      | "mapAgreementClasses"
      | "registerAgreementClass"
      | "registerApp(uint256)"
      | "registerApp(address,uint256)"
      | "registerAppByFactory"
      | "registerAppWithKey"
      | "removeFromAgreementClassesBitmap"
      | "replaceGovernance"
      | "updateAgreementClass"
      | "updatePoolBeaconLogic"
      | "updateSuperTokenFactory"
      | "updateSuperTokenLogic"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgreementClassRegistered"
      | "AgreementClassUpdated"
      | "AppRegistered"
      | "GovernanceReplaced"
      | "Jail"
      | "PoolBeaconLogicUpdated"
      | "SuperTokenFactoryUpdated"
      | "SuperTokenLogicUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToAgreementClassesBitmap",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowCompositeApp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "appCallbackPop",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "appCallbackPush",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCall",
    values: [ISuperfluid.OperationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callAgreement",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAgreementWithContext",
    values: [AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppAction",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppActionWithContext",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppAfterCallback",
    values: [AddressLike, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callAppBeforeCallback",
    values: [AddressLike, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSuperTokenAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ctxUseCredit",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeCtx",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardBatchCall",
    values: [ISuperfluid.OperationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementClass",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppCallbackLevel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppManifest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSuperTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuperTokenFactoryLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAgreementClassListed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgreementTypeListed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isApp", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isAppJailed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompositeAppAllowed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCtxValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jailApp",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mapAgreementClasses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAgreementClass",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerApp(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerApp(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAppByFactory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAppWithKey",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromAgreementClassesBitmap",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementClass",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolBeaconLogic",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperTokenFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperTokenLogic",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToAgreementClassesBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowCompositeApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appCallbackPop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appCallbackPush",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAgreementWithContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppActionWithContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppAfterCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAppBeforeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSuperTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ctxUseCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeCtx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardBatchCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppCallbackLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSuperTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuperTokenFactoryLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgreementClassListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgreementTypeListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAppJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompositeAppAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCtxValid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jailApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mapAgreementClasses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerApp(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerApp(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAppByFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAppWithKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromAgreementClassesBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolBeaconLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperTokenLogic",
    data: BytesLike
  ): Result;
}

export namespace AgreementClassRegisteredEvent {
  export type InputTuple = [agreementType: BytesLike, code: AddressLike];
  export type OutputTuple = [agreementType: string, code: string];
  export interface OutputObject {
    agreementType: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementClassUpdatedEvent {
  export type InputTuple = [agreementType: BytesLike, code: AddressLike];
  export type OutputTuple = [agreementType: string, code: string];
  export interface OutputObject {
    agreementType: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppRegisteredEvent {
  export type InputTuple = [app: AddressLike];
  export type OutputTuple = [app: string];
  export interface OutputObject {
    app: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceReplacedEvent {
  export type InputTuple = [oldGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [oldGov: string, newGov: string];
  export interface OutputObject {
    oldGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JailEvent {
  export type InputTuple = [app: AddressLike, reason: BigNumberish];
  export type OutputTuple = [app: string, reason: bigint];
  export interface OutputObject {
    app: string;
    reason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolBeaconLogicUpdatedEvent {
  export type InputTuple = [
    beaconProxy: AddressLike,
    newBeaconLogic: AddressLike
  ];
  export type OutputTuple = [beaconProxy: string, newBeaconLogic: string];
  export interface OutputObject {
    beaconProxy: string;
    newBeaconLogic: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperTokenFactoryUpdatedEvent {
  export type InputTuple = [newFactory: AddressLike];
  export type OutputTuple = [newFactory: string];
  export interface OutputObject {
    newFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuperTokenLogicUpdatedEvent {
  export type InputTuple = [token: AddressLike, code: AddressLike];
  export type OutputTuple = [token: string, code: string];
  export interface OutputObject {
    token: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISuperfluid extends BaseContract {
  connect(runner?: ContractRunner | null): ISuperfluid;
  waitForDeployment(): Promise<this>;

  interface: ISuperfluidInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToAgreementClassesBitmap: TypedContractMethod<
    [bitmap: BigNumberish, agreementType: BytesLike],
    [bigint],
    "view"
  >;

  allowCompositeApp: TypedContractMethod<
    [targetApp: AddressLike],
    [void],
    "nonpayable"
  >;

  appCallbackPop: TypedContractMethod<
    [ctx: BytesLike, appCreditUsedDelta: BigNumberish],
    [string],
    "nonpayable"
  >;

  appCallbackPush: TypedContractMethod<
    [
      ctx: BytesLike,
      app: AddressLike,
      appCreditGranted: BigNumberish,
      appCreditUsed: BigNumberish,
      appCreditToken: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  batchCall: TypedContractMethod<
    [operations: ISuperfluid.OperationStruct[]],
    [void],
    "payable"
  >;

  callAgreement: TypedContractMethod<
    [agreementClass: AddressLike, callData: BytesLike, userData: BytesLike],
    [string],
    "nonpayable"
  >;

  callAgreementWithContext: TypedContractMethod<
    [
      agreementClass: AddressLike,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike
    ],
    [[string, string] & { newCtx: string; returnedData: string }],
    "nonpayable"
  >;

  callAppAction: TypedContractMethod<
    [app: AddressLike, callData: BytesLike],
    [string],
    "nonpayable"
  >;

  callAppActionWithContext: TypedContractMethod<
    [app: AddressLike, callData: BytesLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;

  callAppAfterCallback: TypedContractMethod<
    [
      app: AddressLike,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  callAppBeforeCallback: TypedContractMethod<
    [
      app: AddressLike,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  changeSuperTokenAdmin: TypedContractMethod<
    [token: AddressLike, newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  ctxUseCredit: TypedContractMethod<
    [ctx: BytesLike, appCreditUsedMore: BigNumberish],
    [string],
    "nonpayable"
  >;

  decodeCtx: TypedContractMethod<
    [ctx: BytesLike],
    [ISuperfluid.ContextStructOutput],
    "view"
  >;

  forwardBatchCall: TypedContractMethod<
    [operations: ISuperfluid.OperationStruct[]],
    [void],
    "nonpayable"
  >;

  getAgreementClass: TypedContractMethod<
    [agreementType: BytesLike],
    [string],
    "view"
  >;

  getAppCallbackLevel: TypedContractMethod<
    [app: AddressLike],
    [bigint],
    "view"
  >;

  getAppManifest: TypedContractMethod<
    [app: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isSuperApp: boolean;
        isJailed: boolean;
        noopMask: bigint;
      }
    ],
    "view"
  >;

  getGovernance: TypedContractMethod<[], [string], "view">;

  getNow: TypedContractMethod<[], [bigint], "view">;

  getSuperTokenFactory: TypedContractMethod<[], [string], "view">;

  getSuperTokenFactoryLogic: TypedContractMethod<[], [string], "view">;

  isAgreementClassListed: TypedContractMethod<
    [agreementClass: AddressLike],
    [boolean],
    "view"
  >;

  isAgreementTypeListed: TypedContractMethod<
    [agreementType: BytesLike],
    [boolean],
    "view"
  >;

  isApp: TypedContractMethod<[app: AddressLike], [boolean], "view">;

  isAppJailed: TypedContractMethod<[app: AddressLike], [boolean], "view">;

  isCompositeAppAllowed: TypedContractMethod<
    [app: AddressLike, targetApp: AddressLike],
    [boolean],
    "view"
  >;

  isCtxValid: TypedContractMethod<[ctx: BytesLike], [boolean], "view">;

  jailApp: TypedContractMethod<
    [ctx: BytesLike, app: AddressLike, reason: BigNumberish],
    [string],
    "nonpayable"
  >;

  mapAgreementClasses: TypedContractMethod<
    [bitmap: BigNumberish],
    [string[]],
    "view"
  >;

  registerAgreementClass: TypedContractMethod<
    [agreementClassLogic: AddressLike],
    [void],
    "nonpayable"
  >;

  "registerApp(uint256)": TypedContractMethod<
    [configWord: BigNumberish],
    [void],
    "nonpayable"
  >;

  "registerApp(address,uint256)": TypedContractMethod<
    [app: AddressLike, configWord: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerAppByFactory: TypedContractMethod<
    [app: AddressLike, configWord: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerAppWithKey: TypedContractMethod<
    [configWord: BigNumberish, registrationKey: string],
    [void],
    "nonpayable"
  >;

  removeFromAgreementClassesBitmap: TypedContractMethod<
    [bitmap: BigNumberish, agreementType: BytesLike],
    [bigint],
    "view"
  >;

  replaceGovernance: TypedContractMethod<
    [newGov: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAgreementClass: TypedContractMethod<
    [agreementClassLogic: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePoolBeaconLogic: TypedContractMethod<
    [newBeaconLogic: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSuperTokenFactory: TypedContractMethod<
    [newFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSuperTokenLogic: TypedContractMethod<
    [token: AddressLike, newLogicOverride: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToAgreementClassesBitmap"
  ): TypedContractMethod<
    [bitmap: BigNumberish, agreementType: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowCompositeApp"
  ): TypedContractMethod<[targetApp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "appCallbackPop"
  ): TypedContractMethod<
    [ctx: BytesLike, appCreditUsedDelta: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "appCallbackPush"
  ): TypedContractMethod<
    [
      ctx: BytesLike,
      app: AddressLike,
      appCreditGranted: BigNumberish,
      appCreditUsed: BigNumberish,
      appCreditToken: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchCall"
  ): TypedContractMethod<
    [operations: ISuperfluid.OperationStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "callAgreement"
  ): TypedContractMethod<
    [agreementClass: AddressLike, callData: BytesLike, userData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callAgreementWithContext"
  ): TypedContractMethod<
    [
      agreementClass: AddressLike,
      callData: BytesLike,
      userData: BytesLike,
      ctx: BytesLike
    ],
    [[string, string] & { newCtx: string; returnedData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callAppAction"
  ): TypedContractMethod<
    [app: AddressLike, callData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callAppActionWithContext"
  ): TypedContractMethod<
    [app: AddressLike, callData: BytesLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callAppAfterCallback"
  ): TypedContractMethod<
    [
      app: AddressLike,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callAppBeforeCallback"
  ): TypedContractMethod<
    [
      app: AddressLike,
      callData: BytesLike,
      isTermination: boolean,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeSuperTokenAdmin"
  ): TypedContractMethod<
    [token: AddressLike, newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ctxUseCredit"
  ): TypedContractMethod<
    [ctx: BytesLike, appCreditUsedMore: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decodeCtx"
  ): TypedContractMethod<
    [ctx: BytesLike],
    [ISuperfluid.ContextStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "forwardBatchCall"
  ): TypedContractMethod<
    [operations: ISuperfluid.OperationStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAgreementClass"
  ): TypedContractMethod<[agreementType: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAppCallbackLevel"
  ): TypedContractMethod<[app: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAppManifest"
  ): TypedContractMethod<
    [app: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isSuperApp: boolean;
        isJailed: boolean;
        noopMask: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGovernance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSuperTokenFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSuperTokenFactoryLogic"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAgreementClassListed"
  ): TypedContractMethod<[agreementClass: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAgreementTypeListed"
  ): TypedContractMethod<[agreementType: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isApp"
  ): TypedContractMethod<[app: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAppJailed"
  ): TypedContractMethod<[app: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCompositeAppAllowed"
  ): TypedContractMethod<
    [app: AddressLike, targetApp: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCtxValid"
  ): TypedContractMethod<[ctx: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "jailApp"
  ): TypedContractMethod<
    [ctx: BytesLike, app: AddressLike, reason: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mapAgreementClasses"
  ): TypedContractMethod<[bitmap: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "registerAgreementClass"
  ): TypedContractMethod<
    [agreementClassLogic: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerApp(uint256)"
  ): TypedContractMethod<[configWord: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerApp(address,uint256)"
  ): TypedContractMethod<
    [app: AddressLike, configWord: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAppByFactory"
  ): TypedContractMethod<
    [app: AddressLike, configWord: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAppWithKey"
  ): TypedContractMethod<
    [configWord: BigNumberish, registrationKey: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeFromAgreementClassesBitmap"
  ): TypedContractMethod<
    [bitmap: BigNumberish, agreementType: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "replaceGovernance"
  ): TypedContractMethod<[newGov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgreementClass"
  ): TypedContractMethod<
    [agreementClassLogic: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePoolBeaconLogic"
  ): TypedContractMethod<[newBeaconLogic: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSuperTokenFactory"
  ): TypedContractMethod<[newFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSuperTokenLogic"
  ): TypedContractMethod<
    [token: AddressLike, newLogicOverride: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AgreementClassRegistered"
  ): TypedContractEvent<
    AgreementClassRegisteredEvent.InputTuple,
    AgreementClassRegisteredEvent.OutputTuple,
    AgreementClassRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AgreementClassUpdated"
  ): TypedContractEvent<
    AgreementClassUpdatedEvent.InputTuple,
    AgreementClassUpdatedEvent.OutputTuple,
    AgreementClassUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AppRegistered"
  ): TypedContractEvent<
    AppRegisteredEvent.InputTuple,
    AppRegisteredEvent.OutputTuple,
    AppRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceReplaced"
  ): TypedContractEvent<
    GovernanceReplacedEvent.InputTuple,
    GovernanceReplacedEvent.OutputTuple,
    GovernanceReplacedEvent.OutputObject
  >;
  getEvent(
    key: "Jail"
  ): TypedContractEvent<
    JailEvent.InputTuple,
    JailEvent.OutputTuple,
    JailEvent.OutputObject
  >;
  getEvent(
    key: "PoolBeaconLogicUpdated"
  ): TypedContractEvent<
    PoolBeaconLogicUpdatedEvent.InputTuple,
    PoolBeaconLogicUpdatedEvent.OutputTuple,
    PoolBeaconLogicUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SuperTokenFactoryUpdated"
  ): TypedContractEvent<
    SuperTokenFactoryUpdatedEvent.InputTuple,
    SuperTokenFactoryUpdatedEvent.OutputTuple,
    SuperTokenFactoryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SuperTokenLogicUpdated"
  ): TypedContractEvent<
    SuperTokenLogicUpdatedEvent.InputTuple,
    SuperTokenLogicUpdatedEvent.OutputTuple,
    SuperTokenLogicUpdatedEvent.OutputObject
  >;

  filters: {
    "AgreementClassRegistered(bytes32,address)": TypedContractEvent<
      AgreementClassRegisteredEvent.InputTuple,
      AgreementClassRegisteredEvent.OutputTuple,
      AgreementClassRegisteredEvent.OutputObject
    >;
    AgreementClassRegistered: TypedContractEvent<
      AgreementClassRegisteredEvent.InputTuple,
      AgreementClassRegisteredEvent.OutputTuple,
      AgreementClassRegisteredEvent.OutputObject
    >;

    "AgreementClassUpdated(bytes32,address)": TypedContractEvent<
      AgreementClassUpdatedEvent.InputTuple,
      AgreementClassUpdatedEvent.OutputTuple,
      AgreementClassUpdatedEvent.OutputObject
    >;
    AgreementClassUpdated: TypedContractEvent<
      AgreementClassUpdatedEvent.InputTuple,
      AgreementClassUpdatedEvent.OutputTuple,
      AgreementClassUpdatedEvent.OutputObject
    >;

    "AppRegistered(address)": TypedContractEvent<
      AppRegisteredEvent.InputTuple,
      AppRegisteredEvent.OutputTuple,
      AppRegisteredEvent.OutputObject
    >;
    AppRegistered: TypedContractEvent<
      AppRegisteredEvent.InputTuple,
      AppRegisteredEvent.OutputTuple,
      AppRegisteredEvent.OutputObject
    >;

    "GovernanceReplaced(address,address)": TypedContractEvent<
      GovernanceReplacedEvent.InputTuple,
      GovernanceReplacedEvent.OutputTuple,
      GovernanceReplacedEvent.OutputObject
    >;
    GovernanceReplaced: TypedContractEvent<
      GovernanceReplacedEvent.InputTuple,
      GovernanceReplacedEvent.OutputTuple,
      GovernanceReplacedEvent.OutputObject
    >;

    "Jail(address,uint256)": TypedContractEvent<
      JailEvent.InputTuple,
      JailEvent.OutputTuple,
      JailEvent.OutputObject
    >;
    Jail: TypedContractEvent<
      JailEvent.InputTuple,
      JailEvent.OutputTuple,
      JailEvent.OutputObject
    >;

    "PoolBeaconLogicUpdated(address,address)": TypedContractEvent<
      PoolBeaconLogicUpdatedEvent.InputTuple,
      PoolBeaconLogicUpdatedEvent.OutputTuple,
      PoolBeaconLogicUpdatedEvent.OutputObject
    >;
    PoolBeaconLogicUpdated: TypedContractEvent<
      PoolBeaconLogicUpdatedEvent.InputTuple,
      PoolBeaconLogicUpdatedEvent.OutputTuple,
      PoolBeaconLogicUpdatedEvent.OutputObject
    >;

    "SuperTokenFactoryUpdated(address)": TypedContractEvent<
      SuperTokenFactoryUpdatedEvent.InputTuple,
      SuperTokenFactoryUpdatedEvent.OutputTuple,
      SuperTokenFactoryUpdatedEvent.OutputObject
    >;
    SuperTokenFactoryUpdated: TypedContractEvent<
      SuperTokenFactoryUpdatedEvent.InputTuple,
      SuperTokenFactoryUpdatedEvent.OutputTuple,
      SuperTokenFactoryUpdatedEvent.OutputObject
    >;

    "SuperTokenLogicUpdated(address,address)": TypedContractEvent<
      SuperTokenLogicUpdatedEvent.InputTuple,
      SuperTokenLogicUpdatedEvent.OutputTuple,
      SuperTokenLogicUpdatedEvent.OutputObject
    >;
    SuperTokenLogicUpdated: TypedContractEvent<
      SuperTokenLogicUpdatedEvent.InputTuple,
      SuperTokenLogicUpdatedEvent.OutputTuple,
      SuperTokenLogicUpdatedEvent.OutputObject
    >;
  };
}
