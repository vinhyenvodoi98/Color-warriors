/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IConstantFlowAgreementV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "agreementType"
      | "authorizeFlowOperatorWithFullControl"
      | "createFlow"
      | "createFlowByOperator"
      | "decreaseFlowRateAllowance"
      | "decreaseFlowRateAllowanceWithPermissions"
      | "deleteFlow"
      | "deleteFlowByOperator"
      | "getAccountFlowInfo"
      | "getDepositRequiredForFlowRate"
      | "getFlow"
      | "getFlowByID"
      | "getFlowOperatorData"
      | "getFlowOperatorDataByID"
      | "getMaximumFlowRateFromDeposit"
      | "getNetFlow"
      | "increaseFlowRateAllowance"
      | "increaseFlowRateAllowanceWithPermissions"
      | "isPatricianPeriod"
      | "isPatricianPeriodNow"
      | "realtimeBalanceOf"
      | "revokeFlowOperatorWithFullControl"
      | "updateFlow"
      | "updateFlowByOperator"
      | "updateFlowOperatorPermissions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FlowOperatorUpdated"
      | "FlowUpdated"
      | "FlowUpdatedExtension"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agreementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeFlowOperatorWithFullControl",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFlow",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFlowByOperator",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseFlowRateAllowance",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseFlowRateAllowanceWithPermissions",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFlow",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFlowByOperator",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountFlowInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositRequiredForFlowRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlow",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowByID",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowOperatorData",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowOperatorDataByID",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumFlowRateFromDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetFlow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseFlowRateAllowance",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseFlowRateAllowanceWithPermissions",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriod",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriodNow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFlowOperatorWithFullControl",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlow",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlowByOperator",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlowOperatorPermissions",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "agreementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeFlowOperatorWithFullControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFlowByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseFlowRateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseFlowRateAllowanceWithPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteFlowByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFlowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositRequiredForFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFlowByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlowOperatorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlowOperatorDataByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumFlowRateFromDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNetFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseFlowRateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseFlowRateAllowanceWithPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriodNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeFlowOperatorWithFullControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFlowByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlowOperatorPermissions",
    data: BytesLike
  ): Result;
}

export namespace FlowOperatorUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    sender: AddressLike,
    flowOperator: AddressLike,
    permissions: BigNumberish,
    flowRateAllowance: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    sender: string,
    flowOperator: string,
    permissions: bigint,
    flowRateAllowance: bigint
  ];
  export interface OutputObject {
    token: string;
    sender: string;
    flowOperator: string;
    permissions: bigint;
    flowRateAllowance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlowUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    sender: AddressLike,
    receiver: AddressLike,
    flowRate: BigNumberish,
    totalSenderFlowRate: BigNumberish,
    totalReceiverFlowRate: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    sender: string,
    receiver: string,
    flowRate: bigint,
    totalSenderFlowRate: bigint,
    totalReceiverFlowRate: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    sender: string;
    receiver: string;
    flowRate: bigint;
    totalSenderFlowRate: bigint;
    totalReceiverFlowRate: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlowUpdatedExtensionEvent {
  export type InputTuple = [flowOperator: AddressLike, deposit: BigNumberish];
  export type OutputTuple = [flowOperator: string, deposit: bigint];
  export interface OutputObject {
    flowOperator: string;
    deposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IConstantFlowAgreementV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IConstantFlowAgreementV1;
  waitForDeployment(): Promise<this>;

  interface: IConstantFlowAgreementV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agreementType: TypedContractMethod<[], [string], "view">;

  authorizeFlowOperatorWithFullControl: TypedContractMethod<
    [token: AddressLike, flowOperator: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;

  createFlow: TypedContractMethod<
    [
      token: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  createFlowByOperator: TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  decreaseFlowRateAllowance: TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      subtractedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  decreaseFlowRateAllowanceWithPermissions: TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      permissionsToRemove: BigNumberish,
      subtractedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  deleteFlow: TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  deleteFlowByOperator: TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getAccountFlowInfo: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;

  getDepositRequiredForFlowRate: TypedContractMethod<
    [token: AddressLike, flowRate: BigNumberish],
    [bigint],
    "view"
  >;

  getFlow: TypedContractMethod<
    [token: AddressLike, sender: AddressLike, receiver: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;

  getFlowByID: TypedContractMethod<
    [token: AddressLike, agreementId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;

  getFlowOperatorData: TypedContractMethod<
    [token: AddressLike, sender: AddressLike, flowOperator: AddressLike],
    [
      [string, bigint, bigint] & {
        flowOperatorId: string;
        permissions: bigint;
        flowRateAllowance: bigint;
      }
    ],
    "view"
  >;

  getFlowOperatorDataByID: TypedContractMethod<
    [token: AddressLike, flowOperatorId: BytesLike],
    [[bigint, bigint] & { permissions: bigint; flowRateAllowance: bigint }],
    "view"
  >;

  getMaximumFlowRateFromDeposit: TypedContractMethod<
    [token: AddressLike, deposit: BigNumberish],
    [bigint],
    "view"
  >;

  getNetFlow: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  increaseFlowRateAllowance: TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      addedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  increaseFlowRateAllowanceWithPermissions: TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      permissionsToAdd: BigNumberish,
      addedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  isPatricianPeriod: TypedContractMethod<
    [token: AddressLike, account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;

  isPatricianPeriodNow: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint] & {
        isCurrentlyPatricianPeriod: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  realtimeBalanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike, time: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        dynamicBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;

  revokeFlowOperatorWithFullControl: TypedContractMethod<
    [token: AddressLike, flowOperator: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;

  updateFlow: TypedContractMethod<
    [
      token: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  updateFlowByOperator: TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  updateFlowOperatorPermissions: TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      permissions: BigNumberish,
      flowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agreementType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authorizeFlowOperatorWithFullControl"
  ): TypedContractMethod<
    [token: AddressLike, flowOperator: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createFlow"
  ): TypedContractMethod<
    [
      token: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createFlowByOperator"
  ): TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseFlowRateAllowance"
  ): TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      subtractedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseFlowRateAllowanceWithPermissions"
  ): TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      permissionsToRemove: BigNumberish,
      subtractedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteFlow"
  ): TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteFlowByOperator"
  ): TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountFlowInfo"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositRequiredForFlowRate"
  ): TypedContractMethod<
    [token: AddressLike, flowRate: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlow"
  ): TypedContractMethod<
    [token: AddressLike, sender: AddressLike, receiver: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlowByID"
  ): TypedContractMethod<
    [token: AddressLike, agreementId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlowOperatorData"
  ): TypedContractMethod<
    [token: AddressLike, sender: AddressLike, flowOperator: AddressLike],
    [
      [string, bigint, bigint] & {
        flowOperatorId: string;
        permissions: bigint;
        flowRateAllowance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlowOperatorDataByID"
  ): TypedContractMethod<
    [token: AddressLike, flowOperatorId: BytesLike],
    [[bigint, bigint] & { permissions: bigint; flowRateAllowance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaximumFlowRateFromDeposit"
  ): TypedContractMethod<
    [token: AddressLike, deposit: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNetFlow"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseFlowRateAllowance"
  ): TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      addedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseFlowRateAllowanceWithPermissions"
  ): TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      permissionsToAdd: BigNumberish,
      addedFlowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPatricianPeriod"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPatricianPeriodNow"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint] & {
        isCurrentlyPatricianPeriod: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "realtimeBalanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, time: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        dynamicBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeFlowOperatorWithFullControl"
  ): TypedContractMethod<
    [token: AddressLike, flowOperator: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFlow"
  ): TypedContractMethod<
    [
      token: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFlowByOperator"
  ): TypedContractMethod<
    [
      token: AddressLike,
      sender: AddressLike,
      receiver: AddressLike,
      flowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFlowOperatorPermissions"
  ): TypedContractMethod<
    [
      token: AddressLike,
      flowOperator: AddressLike,
      permissions: BigNumberish,
      flowRateAllowance: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "FlowOperatorUpdated"
  ): TypedContractEvent<
    FlowOperatorUpdatedEvent.InputTuple,
    FlowOperatorUpdatedEvent.OutputTuple,
    FlowOperatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlowUpdated"
  ): TypedContractEvent<
    FlowUpdatedEvent.InputTuple,
    FlowUpdatedEvent.OutputTuple,
    FlowUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlowUpdatedExtension"
  ): TypedContractEvent<
    FlowUpdatedExtensionEvent.InputTuple,
    FlowUpdatedExtensionEvent.OutputTuple,
    FlowUpdatedExtensionEvent.OutputObject
  >;

  filters: {
    "FlowOperatorUpdated(address,address,address,uint8,int96)": TypedContractEvent<
      FlowOperatorUpdatedEvent.InputTuple,
      FlowOperatorUpdatedEvent.OutputTuple,
      FlowOperatorUpdatedEvent.OutputObject
    >;
    FlowOperatorUpdated: TypedContractEvent<
      FlowOperatorUpdatedEvent.InputTuple,
      FlowOperatorUpdatedEvent.OutputTuple,
      FlowOperatorUpdatedEvent.OutputObject
    >;

    "FlowUpdated(address,address,address,int96,int256,int256,bytes)": TypedContractEvent<
      FlowUpdatedEvent.InputTuple,
      FlowUpdatedEvent.OutputTuple,
      FlowUpdatedEvent.OutputObject
    >;
    FlowUpdated: TypedContractEvent<
      FlowUpdatedEvent.InputTuple,
      FlowUpdatedEvent.OutputTuple,
      FlowUpdatedEvent.OutputObject
    >;

    "FlowUpdatedExtension(address,uint256)": TypedContractEvent<
      FlowUpdatedExtensionEvent.InputTuple,
      FlowUpdatedExtensionEvent.OutputTuple,
      FlowUpdatedExtensionEvent.OutputObject
    >;
    FlowUpdatedExtension: TypedContractEvent<
      FlowUpdatedExtensionEvent.InputTuple,
      FlowUpdatedExtensionEvent.OutputTuple,
      FlowUpdatedExtensionEvent.OutputObject
    >;
  };
}
