/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IInstantDistributionAgreementV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "agreementType"
      | "approveSubscription"
      | "calculateDistribution"
      | "claim"
      | "createIndex"
      | "deleteSubscription"
      | "distribute"
      | "getIndex"
      | "getSubscription"
      | "getSubscriptionByID"
      | "listSubscriptions"
      | "realtimeBalanceOf"
      | "revokeSubscription"
      | "updateIndex"
      | "updateSubscription"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IndexCreated"
      | "IndexDistributionClaimed"
      | "IndexSubscribed"
      | "IndexUnitsUpdated"
      | "IndexUnsubscribed"
      | "IndexUpdated"
      | "SubscriptionApproved"
      | "SubscriptionDistributionClaimed"
      | "SubscriptionRevoked"
      | "SubscriptionUnitsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agreementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveSubscription",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDistribution",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createIndex",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSubscription",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndex",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionByID",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listSubscriptions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubscription",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIndex",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscription",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "agreementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscription",
    data: BytesLike
  ): Result;
}

export namespace IndexCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    publisher: string,
    indexId: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    publisher: string;
    indexId: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexDistributionClaimedEvent {
  export type InputTuple = [
    token: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    subscriber: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    publisher: string,
    indexId: bigint,
    subscriber: string,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    publisher: string;
    indexId: bigint;
    subscriber: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexSubscribedEvent {
  export type InputTuple = [
    token: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    subscriber: AddressLike,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    publisher: string,
    indexId: bigint,
    subscriber: string,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    publisher: string;
    indexId: bigint;
    subscriber: string;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexUnitsUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    subscriber: AddressLike,
    units: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    publisher: string,
    indexId: bigint,
    subscriber: string,
    units: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    publisher: string;
    indexId: bigint;
    subscriber: string;
    units: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexUnsubscribedEvent {
  export type InputTuple = [
    token: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    subscriber: AddressLike,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    publisher: string,
    indexId: bigint,
    subscriber: string,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    publisher: string;
    indexId: bigint;
    subscriber: string;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    oldIndexValue: BigNumberish,
    newIndexValue: BigNumberish,
    totalUnitsPending: BigNumberish,
    totalUnitsApproved: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    publisher: string,
    indexId: bigint,
    oldIndexValue: bigint,
    newIndexValue: bigint,
    totalUnitsPending: bigint,
    totalUnitsApproved: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    publisher: string;
    indexId: bigint;
    oldIndexValue: bigint;
    newIndexValue: bigint;
    totalUnitsPending: bigint;
    totalUnitsApproved: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionApprovedEvent {
  export type InputTuple = [
    token: AddressLike,
    subscriber: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    subscriber: string,
    publisher: string,
    indexId: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionDistributionClaimedEvent {
  export type InputTuple = [
    token: AddressLike,
    subscriber: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    subscriber: string,
    publisher: string,
    indexId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionRevokedEvent {
  export type InputTuple = [
    token: AddressLike,
    subscriber: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    subscriber: string,
    publisher: string,
    indexId: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionUnitsUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    subscriber: AddressLike,
    publisher: AddressLike,
    indexId: BigNumberish,
    units: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    subscriber: string,
    publisher: string,
    indexId: bigint,
    units: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: bigint;
    units: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInstantDistributionAgreementV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IInstantDistributionAgreementV1;
  waitForDeployment(): Promise<this>;

  interface: IInstantDistributionAgreementV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agreementType: TypedContractMethod<[], [string], "view">;

  approveSubscription: TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  calculateDistribution: TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      amount: BigNumberish
    ],
    [[bigint, bigint] & { actualAmount: bigint; newIndexValue: bigint }],
    "view"
  >;

  claim: TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  createIndex: TypedContractMethod<
    [token: AddressLike, indexId: BigNumberish, ctx: BytesLike],
    [string],
    "nonpayable"
  >;

  deleteSubscription: TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  distribute: TypedContractMethod<
    [
      token: AddressLike,
      indexId: BigNumberish,
      amount: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getIndex: TypedContractMethod<
    [token: AddressLike, publisher: AddressLike, indexId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint] & {
        exist: boolean;
        indexValue: bigint;
        totalUnitsApproved: bigint;
        totalUnitsPending: bigint;
      }
    ],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike
    ],
    [
      [boolean, boolean, bigint, bigint] & {
        exist: boolean;
        approved: boolean;
        units: bigint;
        pendingDistribution: bigint;
      }
    ],
    "view"
  >;

  getSubscriptionByID: TypedContractMethod<
    [token: AddressLike, agreementId: BytesLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        publisher: string;
        indexId: bigint;
        approved: boolean;
        units: bigint;
        pendingDistribution: bigint;
      }
    ],
    "view"
  >;

  listSubscriptions: TypedContractMethod<
    [token: AddressLike, subscriber: AddressLike],
    [
      [string[], bigint[], bigint[]] & {
        publishers: string[];
        indexIds: bigint[];
        unitsList: bigint[];
      }
    ],
    "view"
  >;

  realtimeBalanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike, time: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        dynamicBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;

  revokeSubscription: TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  updateIndex: TypedContractMethod<
    [
      token: AddressLike,
      indexId: BigNumberish,
      indexValue: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  updateSubscription: TypedContractMethod<
    [
      token: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike,
      units: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agreementType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveSubscription"
  ): TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateDistribution"
  ): TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      amount: BigNumberish
    ],
    [[bigint, bigint] & { actualAmount: bigint; newIndexValue: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createIndex"
  ): TypedContractMethod<
    [token: AddressLike, indexId: BigNumberish, ctx: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteSubscription"
  ): TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [
      token: AddressLike,
      indexId: BigNumberish,
      amount: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getIndex"
  ): TypedContractMethod<
    [token: AddressLike, publisher: AddressLike, indexId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint] & {
        exist: boolean;
        indexValue: bigint;
        totalUnitsApproved: bigint;
        totalUnitsPending: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike
    ],
    [
      [boolean, boolean, bigint, bigint] & {
        exist: boolean;
        approved: boolean;
        units: bigint;
        pendingDistribution: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscriptionByID"
  ): TypedContractMethod<
    [token: AddressLike, agreementId: BytesLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        publisher: string;
        indexId: bigint;
        approved: boolean;
        units: bigint;
        pendingDistribution: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listSubscriptions"
  ): TypedContractMethod<
    [token: AddressLike, subscriber: AddressLike],
    [
      [string[], bigint[], bigint[]] & {
        publishers: string[];
        indexIds: bigint[];
        unitsList: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "realtimeBalanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, time: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        dynamicBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeSubscription"
  ): TypedContractMethod<
    [
      token: AddressLike,
      publisher: AddressLike,
      indexId: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateIndex"
  ): TypedContractMethod<
    [
      token: AddressLike,
      indexId: BigNumberish,
      indexValue: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSubscription"
  ): TypedContractMethod<
    [
      token: AddressLike,
      indexId: BigNumberish,
      subscriber: AddressLike,
      units: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "IndexCreated"
  ): TypedContractEvent<
    IndexCreatedEvent.InputTuple,
    IndexCreatedEvent.OutputTuple,
    IndexCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IndexDistributionClaimed"
  ): TypedContractEvent<
    IndexDistributionClaimedEvent.InputTuple,
    IndexDistributionClaimedEvent.OutputTuple,
    IndexDistributionClaimedEvent.OutputObject
  >;
  getEvent(
    key: "IndexSubscribed"
  ): TypedContractEvent<
    IndexSubscribedEvent.InputTuple,
    IndexSubscribedEvent.OutputTuple,
    IndexSubscribedEvent.OutputObject
  >;
  getEvent(
    key: "IndexUnitsUpdated"
  ): TypedContractEvent<
    IndexUnitsUpdatedEvent.InputTuple,
    IndexUnitsUpdatedEvent.OutputTuple,
    IndexUnitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "IndexUnsubscribed"
  ): TypedContractEvent<
    IndexUnsubscribedEvent.InputTuple,
    IndexUnsubscribedEvent.OutputTuple,
    IndexUnsubscribedEvent.OutputObject
  >;
  getEvent(
    key: "IndexUpdated"
  ): TypedContractEvent<
    IndexUpdatedEvent.InputTuple,
    IndexUpdatedEvent.OutputTuple,
    IndexUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionApproved"
  ): TypedContractEvent<
    SubscriptionApprovedEvent.InputTuple,
    SubscriptionApprovedEvent.OutputTuple,
    SubscriptionApprovedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionDistributionClaimed"
  ): TypedContractEvent<
    SubscriptionDistributionClaimedEvent.InputTuple,
    SubscriptionDistributionClaimedEvent.OutputTuple,
    SubscriptionDistributionClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionRevoked"
  ): TypedContractEvent<
    SubscriptionRevokedEvent.InputTuple,
    SubscriptionRevokedEvent.OutputTuple,
    SubscriptionRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionUnitsUpdated"
  ): TypedContractEvent<
    SubscriptionUnitsUpdatedEvent.InputTuple,
    SubscriptionUnitsUpdatedEvent.OutputTuple,
    SubscriptionUnitsUpdatedEvent.OutputObject
  >;

  filters: {
    "IndexCreated(address,address,uint32,bytes)": TypedContractEvent<
      IndexCreatedEvent.InputTuple,
      IndexCreatedEvent.OutputTuple,
      IndexCreatedEvent.OutputObject
    >;
    IndexCreated: TypedContractEvent<
      IndexCreatedEvent.InputTuple,
      IndexCreatedEvent.OutputTuple,
      IndexCreatedEvent.OutputObject
    >;

    "IndexDistributionClaimed(address,address,uint32,address,uint256)": TypedContractEvent<
      IndexDistributionClaimedEvent.InputTuple,
      IndexDistributionClaimedEvent.OutputTuple,
      IndexDistributionClaimedEvent.OutputObject
    >;
    IndexDistributionClaimed: TypedContractEvent<
      IndexDistributionClaimedEvent.InputTuple,
      IndexDistributionClaimedEvent.OutputTuple,
      IndexDistributionClaimedEvent.OutputObject
    >;

    "IndexSubscribed(address,address,uint32,address,bytes)": TypedContractEvent<
      IndexSubscribedEvent.InputTuple,
      IndexSubscribedEvent.OutputTuple,
      IndexSubscribedEvent.OutputObject
    >;
    IndexSubscribed: TypedContractEvent<
      IndexSubscribedEvent.InputTuple,
      IndexSubscribedEvent.OutputTuple,
      IndexSubscribedEvent.OutputObject
    >;

    "IndexUnitsUpdated(address,address,uint32,address,uint128,bytes)": TypedContractEvent<
      IndexUnitsUpdatedEvent.InputTuple,
      IndexUnitsUpdatedEvent.OutputTuple,
      IndexUnitsUpdatedEvent.OutputObject
    >;
    IndexUnitsUpdated: TypedContractEvent<
      IndexUnitsUpdatedEvent.InputTuple,
      IndexUnitsUpdatedEvent.OutputTuple,
      IndexUnitsUpdatedEvent.OutputObject
    >;

    "IndexUnsubscribed(address,address,uint32,address,bytes)": TypedContractEvent<
      IndexUnsubscribedEvent.InputTuple,
      IndexUnsubscribedEvent.OutputTuple,
      IndexUnsubscribedEvent.OutputObject
    >;
    IndexUnsubscribed: TypedContractEvent<
      IndexUnsubscribedEvent.InputTuple,
      IndexUnsubscribedEvent.OutputTuple,
      IndexUnsubscribedEvent.OutputObject
    >;

    "IndexUpdated(address,address,uint32,uint128,uint128,uint128,uint128,bytes)": TypedContractEvent<
      IndexUpdatedEvent.InputTuple,
      IndexUpdatedEvent.OutputTuple,
      IndexUpdatedEvent.OutputObject
    >;
    IndexUpdated: TypedContractEvent<
      IndexUpdatedEvent.InputTuple,
      IndexUpdatedEvent.OutputTuple,
      IndexUpdatedEvent.OutputObject
    >;

    "SubscriptionApproved(address,address,address,uint32,bytes)": TypedContractEvent<
      SubscriptionApprovedEvent.InputTuple,
      SubscriptionApprovedEvent.OutputTuple,
      SubscriptionApprovedEvent.OutputObject
    >;
    SubscriptionApproved: TypedContractEvent<
      SubscriptionApprovedEvent.InputTuple,
      SubscriptionApprovedEvent.OutputTuple,
      SubscriptionApprovedEvent.OutputObject
    >;

    "SubscriptionDistributionClaimed(address,address,address,uint32,uint256)": TypedContractEvent<
      SubscriptionDistributionClaimedEvent.InputTuple,
      SubscriptionDistributionClaimedEvent.OutputTuple,
      SubscriptionDistributionClaimedEvent.OutputObject
    >;
    SubscriptionDistributionClaimed: TypedContractEvent<
      SubscriptionDistributionClaimedEvent.InputTuple,
      SubscriptionDistributionClaimedEvent.OutputTuple,
      SubscriptionDistributionClaimedEvent.OutputObject
    >;

    "SubscriptionRevoked(address,address,address,uint32,bytes)": TypedContractEvent<
      SubscriptionRevokedEvent.InputTuple,
      SubscriptionRevokedEvent.OutputTuple,
      SubscriptionRevokedEvent.OutputObject
    >;
    SubscriptionRevoked: TypedContractEvent<
      SubscriptionRevokedEvent.InputTuple,
      SubscriptionRevokedEvent.OutputTuple,
      SubscriptionRevokedEvent.OutputObject
    >;

    "SubscriptionUnitsUpdated(address,address,address,uint32,uint128,bytes)": TypedContractEvent<
      SubscriptionUnitsUpdatedEvent.InputTuple,
      SubscriptionUnitsUpdatedEvent.OutputTuple,
      SubscriptionUnitsUpdatedEvent.OutputObject
    >;
    SubscriptionUnitsUpdated: TypedContractEvent<
      SubscriptionUnitsUpdatedEvent.InputTuple,
      SubscriptionUnitsUpdatedEvent.OutputTuple,
      SubscriptionUnitsUpdatedEvent.OutputObject
    >;
  };
}
