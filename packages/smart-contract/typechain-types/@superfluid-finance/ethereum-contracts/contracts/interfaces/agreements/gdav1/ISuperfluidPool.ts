/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface ISuperfluidPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claimAll(address)"
      | "claimAll()"
      | "decreaseAllowance"
      | "distributionFromAnyAddress"
      | "getClaimable"
      | "getClaimableNow"
      | "getDisconnectedBalance"
      | "getMemberFlowRate"
      | "getTotalAmountReceivedByMember"
      | "getTotalConnectedFlowRate"
      | "getTotalConnectedUnits"
      | "getTotalDisconnectedFlowRate"
      | "getTotalDisconnectedUnits"
      | "getTotalFlowRate"
      | "getTotalUnits"
      | "getUnits"
      | "increaseAllowance"
      | "superToken"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferabilityForUnitsOwner"
      | "updateMemberUnits"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "DistributionClaimed"
      | "MemberUnitsUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAll(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAll()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionFromAnyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableNow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisconnectedBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberFlowRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountReceivedByMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalConnectedFlowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalConnectedUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDisconnectedFlowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDisconnectedUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFlowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "superToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferabilityForUnitsOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMemberUnits",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAll(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAll()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionFromAnyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisconnectedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountReceivedByMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalConnectedFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalConnectedUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDisconnectedFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDisconnectedUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUnits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferabilityForUnitsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMemberUnits",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionClaimedEvent {
  export type InputTuple = [
    token: AddressLike,
    member: AddressLike,
    claimedAmount: BigNumberish,
    totalClaimed: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    member: string,
    claimedAmount: bigint,
    totalClaimed: bigint
  ];
  export interface OutputObject {
    token: string;
    member: string;
    claimedAmount: bigint;
    totalClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberUnitsUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    member: AddressLike,
    oldUnits: BigNumberish,
    newUnits: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    member: string,
    oldUnits: bigint,
    newUnits: bigint
  ];
  export interface OutputObject {
    token: string;
    member: string;
    oldUnits: bigint;
    newUnits: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISuperfluidPool extends BaseContract {
  connect(runner?: ContractRunner | null): ISuperfluidPool;
  waitForDeployment(): Promise<this>;

  interface: ISuperfluidPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  "claimAll(address)": TypedContractMethod<
    [memberAddr: AddressLike],
    [boolean],
    "nonpayable"
  >;

  "claimAll()": TypedContractMethod<[], [boolean], "nonpayable">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  distributionFromAnyAddress: TypedContractMethod<[], [boolean], "view">;

  getClaimable: TypedContractMethod<
    [memberAddr: AddressLike, time: BigNumberish],
    [bigint],
    "view"
  >;

  getClaimableNow: TypedContractMethod<
    [memberAddr: AddressLike],
    [[bigint, bigint] & { claimableBalance: bigint; timestamp: bigint }],
    "view"
  >;

  getDisconnectedBalance: TypedContractMethod<
    [time: BigNumberish],
    [bigint],
    "view"
  >;

  getMemberFlowRate: TypedContractMethod<
    [memberAddr: AddressLike],
    [bigint],
    "view"
  >;

  getTotalAmountReceivedByMember: TypedContractMethod<
    [memberAddr: AddressLike],
    [bigint],
    "view"
  >;

  getTotalConnectedFlowRate: TypedContractMethod<[], [bigint], "view">;

  getTotalConnectedUnits: TypedContractMethod<[], [bigint], "view">;

  getTotalDisconnectedFlowRate: TypedContractMethod<[], [bigint], "view">;

  getTotalDisconnectedUnits: TypedContractMethod<[], [bigint], "view">;

  getTotalFlowRate: TypedContractMethod<[], [bigint], "view">;

  getTotalUnits: TypedContractMethod<[], [bigint], "view">;

  getUnits: TypedContractMethod<[memberAddr: AddressLike], [bigint], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  superToken: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferabilityForUnitsOwner: TypedContractMethod<[], [boolean], "view">;

  updateMemberUnits: TypedContractMethod<
    [memberAddr: AddressLike, newUnits: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimAll(address)"
  ): TypedContractMethod<[memberAddr: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claimAll()"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributionFromAnyAddress"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getClaimable"
  ): TypedContractMethod<
    [memberAddr: AddressLike, time: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimableNow"
  ): TypedContractMethod<
    [memberAddr: AddressLike],
    [[bigint, bigint] & { claimableBalance: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDisconnectedBalance"
  ): TypedContractMethod<[time: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMemberFlowRate"
  ): TypedContractMethod<[memberAddr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalAmountReceivedByMember"
  ): TypedContractMethod<[memberAddr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalConnectedFlowRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalConnectedUnits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalDisconnectedFlowRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalDisconnectedUnits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalFlowRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalUnits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnits"
  ): TypedContractMethod<[memberAddr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "superToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferabilityForUnitsOwner"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateMemberUnits"
  ): TypedContractMethod<
    [memberAddr: AddressLike, newUnits: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DistributionClaimed"
  ): TypedContractEvent<
    DistributionClaimedEvent.InputTuple,
    DistributionClaimedEvent.OutputTuple,
    DistributionClaimedEvent.OutputObject
  >;
  getEvent(
    key: "MemberUnitsUpdated"
  ): TypedContractEvent<
    MemberUnitsUpdatedEvent.InputTuple,
    MemberUnitsUpdatedEvent.OutputTuple,
    MemberUnitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DistributionClaimed(address,address,int256,int256)": TypedContractEvent<
      DistributionClaimedEvent.InputTuple,
      DistributionClaimedEvent.OutputTuple,
      DistributionClaimedEvent.OutputObject
    >;
    DistributionClaimed: TypedContractEvent<
      DistributionClaimedEvent.InputTuple,
      DistributionClaimedEvent.OutputTuple,
      DistributionClaimedEvent.OutputObject
    >;

    "MemberUnitsUpdated(address,address,uint128,uint128)": TypedContractEvent<
      MemberUnitsUpdatedEvent.InputTuple,
      MemberUnitsUpdatedEvent.OutputTuple,
      MemberUnitsUpdatedEvent.OutputObject
    >;
    MemberUnitsUpdated: TypedContractEvent<
      MemberUnitsUpdatedEvent.InputTuple,
      MemberUnitsUpdatedEvent.OutputTuple,
      MemberUnitsUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
