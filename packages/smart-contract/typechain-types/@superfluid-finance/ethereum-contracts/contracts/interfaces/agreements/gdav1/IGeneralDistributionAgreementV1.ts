/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export type PoolConfigStruct = {
  transferabilityForUnitsOwner: boolean;
  distributionFromAnyAddress: boolean;
};

export type PoolConfigStructOutput = [
  transferabilityForUnitsOwner: boolean,
  distributionFromAnyAddress: boolean
] & {
  transferabilityForUnitsOwner: boolean;
  distributionFromAnyAddress: boolean;
};

export interface IGeneralDistributionAgreementV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "agreementType"
      | "claimAll"
      | "connectPool"
      | "createPool"
      | "disconnectPool"
      | "distribute"
      | "distributeFlow"
      | "estimateDistributionActualAmount"
      | "estimateFlowDistributionActualFlowRate"
      | "getAccountFlowInfo"
      | "getFlow"
      | "getFlowRate"
      | "getNetFlow"
      | "getPoolAdjustmentFlowInfo"
      | "getPoolAdjustmentFlowRate"
      | "isMemberConnected"
      | "isPatricianPeriod"
      | "isPatricianPeriodNow"
      | "isPool"
      | "realtimeBalanceOf"
      | "updateMemberUnits"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BufferAdjusted"
      | "FlowDistributionUpdated"
      | "InstantDistributionUpdated"
      | "PoolConnectionUpdated"
      | "PoolCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agreementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAll",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "connectPool",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [AddressLike, AddressLike, PoolConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "disconnectPool",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFlow",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateDistributionActualAmount",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFlowDistributionActualFlowRate",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountFlowInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlow",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowRate",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetFlow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAdjustmentFlowInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAdjustmentFlowRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemberConnected",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriod",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriodNow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPool",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMemberUnits",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "agreementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disconnectPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateDistributionActualAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFlowDistributionActualFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFlowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNetFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAdjustmentFlowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAdjustmentFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMemberConnected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriodNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMemberUnits",
    data: BytesLike
  ): Result;
}

export namespace BufferAdjustedEvent {
  export type InputTuple = [
    token: AddressLike,
    pool: AddressLike,
    from: AddressLike,
    bufferDelta: BigNumberish,
    newBufferAmount: BigNumberish,
    totalBufferAmount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    pool: string,
    from: string,
    bufferDelta: bigint,
    newBufferAmount: bigint,
    totalBufferAmount: bigint
  ];
  export interface OutputObject {
    token: string;
    pool: string;
    from: string;
    bufferDelta: bigint;
    newBufferAmount: bigint;
    totalBufferAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlowDistributionUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    pool: AddressLike,
    distributor: AddressLike,
    operator: AddressLike,
    oldFlowRate: BigNumberish,
    newDistributorToPoolFlowRate: BigNumberish,
    newTotalDistributionFlowRate: BigNumberish,
    adjustmentFlowRecipient: AddressLike,
    adjustmentFlowRate: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    pool: string,
    distributor: string,
    operator: string,
    oldFlowRate: bigint,
    newDistributorToPoolFlowRate: bigint,
    newTotalDistributionFlowRate: bigint,
    adjustmentFlowRecipient: string,
    adjustmentFlowRate: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    pool: string;
    distributor: string;
    operator: string;
    oldFlowRate: bigint;
    newDistributorToPoolFlowRate: bigint;
    newTotalDistributionFlowRate: bigint;
    adjustmentFlowRecipient: string;
    adjustmentFlowRate: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstantDistributionUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    pool: AddressLike,
    distributor: AddressLike,
    operator: AddressLike,
    requestedAmount: BigNumberish,
    actualAmount: BigNumberish,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    pool: string,
    distributor: string,
    operator: string,
    requestedAmount: bigint,
    actualAmount: bigint,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    pool: string;
    distributor: string;
    operator: string;
    requestedAmount: bigint;
    actualAmount: bigint;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolConnectionUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    pool: AddressLike,
    account: AddressLike,
    connected: boolean,
    userData: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    pool: string,
    account: string,
    connected: boolean,
    userData: string
  ];
  export interface OutputObject {
    token: string;
    pool: string;
    account: string;
    connected: boolean;
    userData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    admin: AddressLike,
    pool: AddressLike
  ];
  export type OutputTuple = [token: string, admin: string, pool: string];
  export interface OutputObject {
    token: string;
    admin: string;
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGeneralDistributionAgreementV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IGeneralDistributionAgreementV1;
  waitForDeployment(): Promise<this>;

  interface: IGeneralDistributionAgreementV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agreementType: TypedContractMethod<[], [string], "view">;

  claimAll: TypedContractMethod<
    [pool: AddressLike, memberAddress: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;

  connectPool: TypedContractMethod<
    [pool: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;

  createPool: TypedContractMethod<
    [token: AddressLike, admin: AddressLike, poolConfig: PoolConfigStruct],
    [string],
    "nonpayable"
  >;

  disconnectPool: TypedContractMethod<
    [pool: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;

  distribute: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      pool: AddressLike,
      requestedAmount: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  distributeFlow: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      pool: AddressLike,
      requestedFlowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  estimateDistributionActualAmount: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      requestedAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  estimateFlowDistributionActualFlowRate: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      requestedFlowRate: BigNumberish
    ],
    [
      [bigint, bigint] & {
        actualFlowRate: bigint;
        totalDistributionFlowRate: bigint;
      }
    ],
    "view"
  >;

  getAccountFlowInfo: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
      }
    ],
    "view"
  >;

  getFlow: TypedContractMethod<
    [token: AddressLike, from: AddressLike, to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastUpdated: bigint;
        flowRate: bigint;
        deposit: bigint;
      }
    ],
    "view"
  >;

  getFlowRate: TypedContractMethod<
    [token: AddressLike, from: AddressLike, to: AddressLike],
    [bigint],
    "view"
  >;

  getNetFlow: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  getPoolAdjustmentFlowInfo: TypedContractMethod<
    [pool: AddressLike],
    [[string, string, bigint]],
    "view"
  >;

  getPoolAdjustmentFlowRate: TypedContractMethod<
    [pool: AddressLike],
    [bigint],
    "view"
  >;

  isMemberConnected: TypedContractMethod<
    [pool: AddressLike, memberAddr: AddressLike],
    [boolean],
    "view"
  >;

  isPatricianPeriod: TypedContractMethod<
    [token: AddressLike, account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;

  isPatricianPeriodNow: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint] & {
        isCurrentlyPatricianPeriod: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  isPool: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  realtimeBalanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike, time: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        dynamicBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;

  updateMemberUnits: TypedContractMethod<
    [
      pool: AddressLike,
      memberAddress: AddressLike,
      newUnits: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agreementType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimAll"
  ): TypedContractMethod<
    [pool: AddressLike, memberAddress: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "connectPool"
  ): TypedContractMethod<
    [pool: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [token: AddressLike, admin: AddressLike, poolConfig: PoolConfigStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disconnectPool"
  ): TypedContractMethod<
    [pool: AddressLike, ctx: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      pool: AddressLike,
      requestedAmount: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeFlow"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      pool: AddressLike,
      requestedFlowRate: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "estimateDistributionActualAmount"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      requestedAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateFlowDistributionActualFlowRate"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      requestedFlowRate: BigNumberish
    ],
    [
      [bigint, bigint] & {
        actualFlowRate: bigint;
        totalDistributionFlowRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountFlowInfo"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [bigint, bigint, bigint] & {
        timestamp: bigint;
        flowRate: bigint;
        deposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlow"
  ): TypedContractMethod<
    [token: AddressLike, from: AddressLike, to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastUpdated: bigint;
        flowRate: bigint;
        deposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlowRate"
  ): TypedContractMethod<
    [token: AddressLike, from: AddressLike, to: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNetFlow"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAdjustmentFlowInfo"
  ): TypedContractMethod<
    [pool: AddressLike],
    [[string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAdjustmentFlowRate"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isMemberConnected"
  ): TypedContractMethod<
    [pool: AddressLike, memberAddr: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPatricianPeriod"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, timestamp: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPatricianPeriodNow"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [
      [boolean, bigint] & {
        isCurrentlyPatricianPeriod: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPool"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "realtimeBalanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike, time: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        dynamicBalance: bigint;
        deposit: bigint;
        owedDeposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateMemberUnits"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      memberAddress: AddressLike,
      newUnits: BigNumberish,
      ctx: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "BufferAdjusted"
  ): TypedContractEvent<
    BufferAdjustedEvent.InputTuple,
    BufferAdjustedEvent.OutputTuple,
    BufferAdjustedEvent.OutputObject
  >;
  getEvent(
    key: "FlowDistributionUpdated"
  ): TypedContractEvent<
    FlowDistributionUpdatedEvent.InputTuple,
    FlowDistributionUpdatedEvent.OutputTuple,
    FlowDistributionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "InstantDistributionUpdated"
  ): TypedContractEvent<
    InstantDistributionUpdatedEvent.InputTuple,
    InstantDistributionUpdatedEvent.OutputTuple,
    InstantDistributionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolConnectionUpdated"
  ): TypedContractEvent<
    PoolConnectionUpdatedEvent.InputTuple,
    PoolConnectionUpdatedEvent.OutputTuple,
    PoolConnectionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;

  filters: {
    "BufferAdjusted(address,address,address,int256,uint256,uint256)": TypedContractEvent<
      BufferAdjustedEvent.InputTuple,
      BufferAdjustedEvent.OutputTuple,
      BufferAdjustedEvent.OutputObject
    >;
    BufferAdjusted: TypedContractEvent<
      BufferAdjustedEvent.InputTuple,
      BufferAdjustedEvent.OutputTuple,
      BufferAdjustedEvent.OutputObject
    >;

    "FlowDistributionUpdated(address,address,address,address,int96,int96,int96,address,int96,bytes)": TypedContractEvent<
      FlowDistributionUpdatedEvent.InputTuple,
      FlowDistributionUpdatedEvent.OutputTuple,
      FlowDistributionUpdatedEvent.OutputObject
    >;
    FlowDistributionUpdated: TypedContractEvent<
      FlowDistributionUpdatedEvent.InputTuple,
      FlowDistributionUpdatedEvent.OutputTuple,
      FlowDistributionUpdatedEvent.OutputObject
    >;

    "InstantDistributionUpdated(address,address,address,address,uint256,uint256,bytes)": TypedContractEvent<
      InstantDistributionUpdatedEvent.InputTuple,
      InstantDistributionUpdatedEvent.OutputTuple,
      InstantDistributionUpdatedEvent.OutputObject
    >;
    InstantDistributionUpdated: TypedContractEvent<
      InstantDistributionUpdatedEvent.InputTuple,
      InstantDistributionUpdatedEvent.OutputTuple,
      InstantDistributionUpdatedEvent.OutputObject
    >;

    "PoolConnectionUpdated(address,address,address,bool,bytes)": TypedContractEvent<
      PoolConnectionUpdatedEvent.InputTuple,
      PoolConnectionUpdatedEvent.OutputTuple,
      PoolConnectionUpdatedEvent.OutputObject
    >;
    PoolConnectionUpdated: TypedContractEvent<
      PoolConnectionUpdatedEvent.InputTuple,
      PoolConnectionUpdatedEvent.OutputTuple,
      PoolConnectionUpdatedEvent.OutputObject
    >;

    "PoolCreated(address,address,address)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
  };
}
